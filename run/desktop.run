set use_usb_driver   [expr [have_spec omap4] || [have_spec arndale] || [have_spec rpi]]
set use_nic_driver   [expr !$use_usb_driver && ![have_spec imx53] && ![have_spec linux] && ![have_spec odroid_xu] && ![have_spec wand_quad]]

#
# Check used commands
#
set mke2fs [check_installed mke2fs]
set dd     [check_installed dd]

if {[have_spec odroid_xu]} {
	puts "Run script does not support this platform."
	exit 0
}

#
# Build Noux packages only once
#
foreach pkg {bash coreutils} {
	lappend_if [expr ![file exists bin/$pkg]] build_components noux-pkg/$pkg }

source ${genode_dir}/repos/base/run/platform_drv.inc

#
# Build
#

set build_components {
  core 
  init
  timer

  drivers/framebuffer
  drivers/platform
  drivers/input
  drivers/acpi
  drivers/ahci
  
  server/terminal
  server/report_rom
  server/rom_filter
  server/nitpicker
  server/ram_blk
  server/part_blk
  server/rump_fs
  server/ram_fs
  server/nit_fb
  
  noux
  lib/libc_noux
  
  app/cli_monitor
  app/pointer
  app/xray_trigger
}

proc gpio_drv { } { if {[have_spec rpi] && [have_spec hw]}  { return hw_gpio_drv }
		    if {[have_spec rpi] && [have_spec foc]} { return foc_gpio_drv }
		    return gpio_drv }

lappend_if $use_usb_driver  build_components drivers/usb
lappend_if $use_nic_driver  build_components drivers/nic
lappend_if [need_usb_hid]   build_components drivers/usb
lappend_if [have_spec gpio] build_components drivers/gpio

append_platform_drv_build_components

build $build_components

#
# Build EXT2-file-system image
#
catch { exec $dd if=/dev/zero of=bin/ext2.raw bs=1M count=16 }
catch { exec $mke2fs -F bin/ext2.raw }

create_boot_directory

#
# Generate config
#

append config {
<config verbose="yes">
  <parent-provides>
    <service name="ROM"/>
    <service name="IRQ"/>
    <service name="IO_MEM"/>
    <service name="IO_PORT"/>
    <service name="PD"/>
    <service name="RM"/>
    <service name="CPU"/>
    <service name="LOG"/>
  </parent-provides>

  <default-route>
    <any-service> <parent/> <any-child/> </any-service>
  </default-route>
  
  <default caps="100"/>}

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_if $use_nic_driver config {
	<start name="nic_drv">
		<resource name="RAM" quantum="8M"/>
		<provides> <service name="Nic"/> </provides>
	</start>}

append_platform_drv_config

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
		<config width="800" height="600"/>
	</start>}

append config {
  <start name="timer">
    <resource name="RAM" quantum="1M"/>
    <provides><service name="Timer"/></provides>
  </start>
 
 <start name="ps2_drv">
    <resource name="RAM" quantum="1M"/>
    <provides><service name="Input"/></provides>
  </start>

  <start name="nitpicker">
    <resource name="RAM" quantum="1M"/>
    <provides><service name="Nitpicker"/></provides>
    <config>
			<report hover="yes" focus="yes" />
		<domain name="pointer" layer="1" content="client" label="no" origin="pointer" />
			<domain name="default"   layer="3" color="#ff0000" hover="always" focus="click" />
			<domain name="panel"     layer="2" content="client" label="no" hover="always" focus="transient" />
			<domain name="decorator" layer="3" content="client" label="no" hover="always" focus="transient" />
		<policy label_prefix="pointer" domain="pointer"/>
		<policy label_prefix="status_bar"             domain="panel"/>
		<default-policy domain="default"/>
    </config>
	<route> }
append_if [have_spec ps2] config {
		<service name="Input"><child name="ps2_drv"/></service> }
append config {
		<service name="Framebuffer"><child name="fb_drv"/> </service>
		<any-service><parent/><any-child/></any-service>
	</route>
  </start>

  <start name="pointer">
    <resource name="RAM" quantum="1M"/>
  </start>

    <start name="ram_fs">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<!-- preload RAM file system with some ROM images -->
			<content>
				<dir name="tmp">
					<rom name="init" as="blubb" />
				</dir>
				<dir name="home">
					<dir name="user">
						<!-- just a place holder -->
						<rom name="timer" />
						<inline name="diff_me_a.txt">
Hello world ?!
						</inline>
						<inline name="diff_me_b.txt">
Hello world !!
						</inline>
					</dir>
				</dir>
                <dir name="subsystems">
                </dir>
			</content>
			<!-- constrain sessions according to their labels -->
			<policy label="noux -> root" root="/" writeable="no" />
			<policy label="noux2 -> root" root="/home" writeable="yes" />
		</config>
	</start>
    
    
    
    
 	<start name="report_rom">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes">
			<policy label="status_bar -> focus"      report="nitpicker -> focus"/>
			<policy label="mytest_config -> xray" report="xray_trigger -> xray"/>
			<policy label="xray_trigger -> hover"    report="nitpicker -> hover"/>
		</config>
	</start>

   
    <start name="mytest_config">
		<binary name="rom_filter"/>
		<resource name="RAM" quantum="1M"/>
		<provides><service name="ROM"/></provides>
		<config verbose="yes">
			<input name="xray_enabled" rom="xray" node="xray">
				<attribute name="enabled" /> </input>

			<output node="config">
				<inline>
					<report focus="yes" xray="yes" hover="yes" />
					<domain name="pointer" layer="1" origin="pointer"
					        content="client" label="no"/>
					<domain name="panel" layer="2"
					        content="client" label="no" hover="always"/>
				</inline>
				<if>
					<has_value input="xray_enabled" value="no" />
					<then>
						<inline>
							<domain name="launchpad" layer="3"
							        content="client" label="no" hover="always" focus="click"
							        ypos="18" height="-18" />
							<domain name="" layer="3"
							        content="client" label="no" hover="always" focus="click"
							        ypos="18" height="-18" />
						</inline>
					</then>
					<else>
						<inline>
							<domain name="launchpad" layer="3" color="#dd0000"
							        content="tinted" label="yes" hover="focused" focus="click"
							        ypos="18" height="-18" />
							<domain name="" layer="3" color="#55dd34"
							        content="tinted" label="yes" hover="focused" focus="click"
							        ypos="18" height="-18" />
						</inline>
					</else>
				</if>
				<inline>
					
					<global-key name="KEY_SCROLLLOCK" label="xray_trigger -> input" />
					<global-key name="KEY_F1"         label="xray_trigger -> input" />
					<global-key name="KEY_F2"         label="xray_trigger -> input" />
				</inline>
			</output>
		</config>
		<route>
			<service name="ROM" label="xray"> <child name="report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="xray_trigger">
		<resource name="RAM" quantum="1M"/>
		<config verbose="yes">
			<press   name="KEY_F1" xray="on"/>
			<release name="KEY_F1" xray="off"/>
			<press   name="KEY_F2" xray="toggle"/>
			<hover domain="panel"/>
		</config>
		<route>
			<service name="Report"> <child name="report_rom"/> </service>
			<service name="ROM" label="hover"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <start name="terminal_noux_fb">
		<binary name="nit_fb"/>
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="Framebuffer"/>
			<service name="Input"/>
		</provides>
		<config xpos="0" ypos="0" width="800" height="200" refresh_rate="25"/>
	</start>
	
	<start name="terminal_test_fb">
		<binary name="nit_fb"/>
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="Framebuffer"/>
			<service name="Input"/>
		</provides>
		<config xpos="0" ypos="208" width="800" height="200" refresh_rate="25"/>
	</start>
	
	<start name="terminal_noux">
		<binary name="terminal"/>
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
		<route>
			<service name="Input"><child name="terminal_noux_fb"/></service>
			<service name="Framebuffer"><child name="terminal_noux_fb"/> </service>
			<any-service><parent/><any-child/></any-service>
		</route>
		<config>
			<keyboard layout="de"/>
            <font size="12" />
		</config>
	</start>
	
	<start name="terminal_noux2">
		<binary name="terminal"/>
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
		<route>
			<service name="Input"><child name="terminal_test_fb"/></service>
			<service name="Framebuffer"><child name="terminal_test_fb"/> </service>
			<any-service><parent/><any-child /></any-service>
		</route>
		<config>
            <keyboard layout="de"/>
            <font size="12" />
		</config>
	</start>
	
    	<start name="noux" caps="500">
		<resource name="RAM" quantum="50M" />
		<route>
			<service name="Terminal">
				<child name="terminal_noux"/>
			</service>
			<any-service><parent/><any-child/></any-service>
		</route>
		<config>
			<fstab>
				<tar name="coreutils.tar" />
				<tar name="bash.tar" />

				<dir name="ram"> <fs label="root" /> </dir>
				<dir name="dev"> <terminal name="terminal" label="terminal_fs" /> </dir>
			</fstab>
			<start name="/bin/bash">
				<env name="TERM" value="linux" />
			</start>
		</config>
	</start>

	<start name="noux2" caps="500">
		<binary name="noux" />
		<resource name="RAM" quantum="1G" />
		<route>
			<service name="Terminal">
				<child name="terminal_noux2"/>
			</service>
			<any-service><parent/><any-child/></any-service>
		</route>
		<config>
			<fstab>
				<tar name="coreutils.tar" />
				<tar name="bash.tar" />

				<dir name="ram"> <fs label="root" /> </dir>
				<dir name="dev"> <terminal name="terminal" label="terminal_fs" /> </dir>
			</fstab>
			<start name="/bin/bash">
				<env name="TERM" value="linux" />
			</start>
		</config>
	</start>

</config>
}

install_config $config

set boot_modules {
  core 
  ld.lib.so 
  init
  
  ext2.raw
  
  ram_blk
  rump.lib.so
  rump_fs.lib.so
  rump_fs
  ram_fs
  
  timer
  nitpicker
  report_rom
  rom_filter
  nit_fb
  part_blk
  
  pointer
  terminal
  cli_monitor
  xray_trigger
  
  libc.lib.so
  libm.lib.so
  libc_noux.lib.so
  posix.lib.so
  
  noux
  
  bash.tar
  coreutils.tar
}

# platform-specific modules
lappend_if $use_nic_driver         boot_modules nic_drv
lappend_if $use_usb_driver         boot_modules usb_drv
lappend_if [have_spec linux]       boot_modules fb_sdl
lappend_if [have_spec ps2]         boot_modules ps2_drv
lappend_if [have_spec framebuffer] boot_modules fb_drv
lappend_if [need_usb_hid]          boot_modules usb_drv
lappend_if [have_spec gpio]        boot_modules [gpio_drv]
lappend_if [have_spec imx53]       boot_modules input_drv

append_platform_drv_boot_modules

build_boot_image $boot_modules

append_if [have_spec x86]     qemu_args " -net nic,model=e1000 "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

append qemu_args " -net user -redir tcp:5555::80 "

run_genode_until forever
